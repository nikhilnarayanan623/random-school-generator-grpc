// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: pkg/proto/school.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchoolServiceClient is the client API for SchoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchoolServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (SchoolService_CreateClient, error)
}

type schoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchoolServiceClient(cc grpc.ClientConnInterface) SchoolServiceClient {
	return &schoolServiceClient{cc}
}

func (c *schoolServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (SchoolService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &SchoolService_ServiceDesc.Streams[0], "/proto.SchoolService/Create", opts...)
	if err != nil {
		return nil, err
	}
	x := &schoolServiceCreateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SchoolService_CreateClient interface {
	Recv() (*CreateResponse, error)
	grpc.ClientStream
}

type schoolServiceCreateClient struct {
	grpc.ClientStream
}

func (x *schoolServiceCreateClient) Recv() (*CreateResponse, error) {
	m := new(CreateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SchoolServiceServer is the server API for SchoolService service.
// All implementations must embed UnimplementedSchoolServiceServer
// for forward compatibility
type SchoolServiceServer interface {
	Create(*CreateRequest, SchoolService_CreateServer) error
	mustEmbedUnimplementedSchoolServiceServer()
}

// UnimplementedSchoolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchoolServiceServer struct {
}

func (UnimplementedSchoolServiceServer) Create(*CreateRequest, SchoolService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSchoolServiceServer) mustEmbedUnimplementedSchoolServiceServer() {}

// UnsafeSchoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchoolServiceServer will
// result in compilation errors.
type UnsafeSchoolServiceServer interface {
	mustEmbedUnimplementedSchoolServiceServer()
}

func RegisterSchoolServiceServer(s grpc.ServiceRegistrar, srv SchoolServiceServer) {
	s.RegisterService(&SchoolService_ServiceDesc, srv)
}

func _SchoolService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchoolServiceServer).Create(m, &schoolServiceCreateServer{stream})
}

type SchoolService_CreateServer interface {
	Send(*CreateResponse) error
	grpc.ServerStream
}

type schoolServiceCreateServer struct {
	grpc.ServerStream
}

func (x *schoolServiceCreateServer) Send(m *CreateResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SchoolService_ServiceDesc is the grpc.ServiceDesc for SchoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SchoolService",
	HandlerType: (*SchoolServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Create",
			Handler:       _SchoolService_Create_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/school.proto",
}
